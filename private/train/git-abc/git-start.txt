##git科普
#什么是版本控制？
VCS系统是记录文件变化以便将来查阅，修订的系统。
我们编码过程中源代码写错了，简单的可以使用Ctrl+Z来撤销，若是涉及到若干次修改的查阅和修订，我们就需要一个统一的系统来帮忙管理每次修改和文件的增量变化

#原始的版本管理
将整个项目目录复制一份打包或压缩起来取一个别名加上一个日期。
好处：简单
坏处：混淆版本,混淆文件,发现版本有错，手工回退，回退粗糙。
在此基础上有大量的本地版本工具BUT他们实现了版本的历史比较，差异对比，但是没有协作功能。
协作功能相当扯蛋。
当项目团队人多了的时候协作就成为了最迫切的需求。

#集中化版本管理
集中化版本管理工具采用服务器-客户端模式经典C/S模式
好处：权限管理，方便协作，集中控制，版本管理，历史版本比对，继承了本地版本管理工具的90%优点。
坏处：服务器集中存储，大部分逻辑都在服务器端。
当需要查询一个小文件的某个历史版本的时候，也需要与服务器进行交互。当项目人多的时候，我们需要高性能的服务器才能支持我们的需求。然需求是日益增长的。最致命的是集中存储，当服务器停摆的时候会导致所有人的痛苦。为了保证稳定于是加双机，加热备，功能越来越庞大，系统越来越冗余。
终于有人受不了，于是分布式版本管理出现了。

#分布式版本管理


#原始的版本管理
将整个项目目录复制一份打包或压缩起来取一个别名加上一个日期。
好处：简单
坏处：混淆版本,混淆文件,发现版本有错，手工回退，回退粗糙。
在此基础上有大量的本地版本工具BUT他们实现了版本的历史比较，差异对比，但是没有协作功能。
协作功能相当扯蛋。
#集中化版本管理
集中化版本管理工具采用服务器-客户端模式经典C/S模式
好处：权限管理，方便协作，集中控制，版本管理，历史版本比对，继承了本地版本管理工具的90%优点。
坏处：服务器集中存储

git历史
最开始Linux Kernel Team使用BitKeeper管理源代码，BitKeeper是一款分布式的管理软
件BUT商业软件，BitKeeper对开源社区是免费使用的Samba服务的作者对Bitkeeper软件逆
向工程了，于是BitKeeper收回了免费使用的权限。
Linus 决定老子自己写一个。
目标
1、速度快
2、简单的设计
3、对非线性开发模式的强力支持(允许上千个并行开发的分支)
4、完全分布式
5、有能力高效管理Linux Kernel一样的大规模项目
git大部分的操作都在本地操作，git类似一个文件管理系统一样对目录下的变化进行管理，
当目录下面新加文件后，此时git并为对文件的变化进行跟踪，当文件添加进git工作流里
面后，git对文件的变化进行管理，当用户对本次操作进行了提交后git对变更的文件进行
SHA签名，此时所有操作都基本上是瞬间完成，只有当用户确定将修改推送至服务器时git
才进行网络交互。
快照
下面大家一起来感受Git的魅力吧，首先让我们来一起安装Git
常用命令列表
git init  git clone git status git add git commit git rm/mv git push git pull
git log git show git diff
git branch git tag
git merge xx git rebase xx
git checkout 
下面一起体验一下Git
git init
#初始化本地版本库
git status
git add

.gitignore
#
.gitconfig
#配置
[user]
name = ndk
email = yhsponder@gmail.com

[core]
editor=emacs

[color]
status=auto
branch=auto
diff=auto
interactive=auto
ui=auto
log=true
[alias]
lt= log -l HEAD
lst= log --stat
st= status
ci= commit
cim= commit -m
co= checkout
br= branch
tg= tag 

[log]
date=iso
